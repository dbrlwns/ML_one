{"cells":[{"cell_type":"code","source":["# DNN\n","from torchvision import datasets, transforms, utils\n","from torch.utils import data\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# image to Tensor\n","transform = transforms.Compose([\n","    transforms.ToTensor()\n","])\n","\n","# dataset download\n","trainset = datasets.FashionMNIST(\n","    root = './.data/',\n","    train = True,\n","    download = True,\n","    transform = transform\n",")\n","testset = datasets.FashionMNIST(\n","    root = './.data/',\n","    train = False,\n","    download = True,\n","    transform = transform\n",")\n","\n","\n","# 매개변수에 데이터셋을 넣어주고 배치 크기 지정\n","batch_size = 16\n","train_loader = data.DataLoader(\n","    dataset = trainset,\n","    batch_size = batch_size\n",")\n","test_loader = data.DataLoader(\n","    dataset = testset,\n","    batch_size = batch_size\n",")\n","\n","\n","# 배치 1개 가져오기\n","dataiter = iter(train_loader)\n","images, labels = next(dataiter)\n","\n","\n","# 이미지 확인\n","img = utils.make_grid(images)\n","npimg = img.numpy()\n","#plt.figure(figsize = (10, 7))\n","#plt.imshow(np.transpose(npimg, (1,2,0)))\n","#plt.show()\n","\n","print(labels)\n","\n","CLASSES = {\n","    0: 'T-shirt/top',\n","    1: 'Trouser',\n","    2: 'Pullover',\n","    3: 'Dress',\n","    4: 'Coat',\n","    5: 'Sandal',\n","    6: 'Shirt',\n","    7: 'Sneaker',\n","    8: 'Bag',\n","    9: 'Ankle boot'\n","}\n","\n","for label in labels:\n","    index = label.item()\n","    #print(CLASSES[index])\n","\n","# 개별 이미지 확인\n","idx = 1\n","item_img = images[idx]\n","item_npimg = item_img.squeeze().numpy()\n","#plt.title(CLASSES[labels[idx].item()])\n","#plt.imshow(item_npimg, cmap='gray')\n","#plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wENNel-uezQy","executionInfo":{"status":"ok","timestamp":1737871405095,"user_tz":-540,"elapsed":1851,"user":{"displayName":"느으엉","userId":"07251074960080111046"}},"outputId":"a4820ccb-c923-4199-e977-c4509cb23dff"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./.data/FashionMNIST/raw/train-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 26.4M/26.4M [00:00<00:00, 113MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./.data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./.data/FashionMNIST/raw\n","\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./.data/FashionMNIST/raw/train-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 29.5k/29.5k [00:00<00:00, 6.26MB/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting ./.data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./.data/FashionMNIST/raw\n","\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./.data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["\n","100%|██████████| 4.42M/4.42M [00:00<00:00, 58.0MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./.data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./.data/FashionMNIST/raw\n","\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\n","Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./.data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 5.15k/5.15k [00:00<00:00, 5.70MB/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting ./.data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./.data/FashionMNIST/raw\n","\n"]},{"output_type":"stream","name":"stderr","text":["\n"]},{"output_type":"stream","name":"stdout","text":["tensor([9, 0, 0, 3, 0, 2, 7, 2, 5, 5, 0, 9, 5, 5, 7, 9])\n"]}]},{"cell_type":"code","source":["# DNN , class 3\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torchvision import transforms, datasets\n","\n","USE_CUDA = torch.cuda.is_available()\n","DEVICE = torch.device(\"cuda\" if USE_CUDA else \"cpu\")\n","\n","EPOCHS = 30\n","BATCH_SIZE = 64\n","\n","class Net(nn.Module):\n","    def __init__(self):\n","        super(Net, self).__init__()\n","        self.fc1 = nn.Linear(784, 256)\n","        self.fc2 = nn.Linear(256, 128)\n","        self.fc3 = nn.Linear(128, 10)\n","\n","    def forward(self, x):\n","        x = x.view(-1, 784) # PyTorch가 자동으로 배치 크기를 계산하도록 설정\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","model = Net().to(DEVICE)\n","\n","optimizer = optim.SGD(model.parameters(), lr = 0.01)\n","\n","# 학습 연산 , 데이터의 형은 [64, 1, 28, 28]\n","def train(model, train_loader, optimizer):\n","    model.train()\n","\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        # 학습 데이터를 DEVICE의 메모리로 보냄\n","        data, target = data.to(DEVICE), target.to(DEVICE)\n","\n","        optimizer.zero_grad()\n","        output = model(data) # 내부적으로 forward() 메서드를 호출\n","        loss = F.cross_entropy(output, target)\n","        loss.backward()\n","        optimizer.step()\n","\n","\n","def evaluate(model, test_loader):\n","    model.eval()\n","    test_loss = 0\n","    correct = 0\n","\n","    with torch.no_grad():\n","        for data, target in test_loader:\n","            data, target = data.to(DEVICE), target.to(DEVICE)\n","            output = model(data)\n","\n","            # 모든 오차 더하기\n","            test_loss += F.cross_entropy(output, target, reduction='sum').item()\n","\n","            pred = output.max(1, keepdim=True)[1]\n","            correct += pred.eq(target.view_as(pred)).sum().item()\n","\n","    test_loss /= len(test_loader.dataset)\n","    test_accuracy = 100. * correct / len(test_loader.dataset)\n","    return test_loss, test_accuracy\n","\n","\n","\n","for epoch in range(1, EPOCHS + 1):\n","    train(model, train_loader, optimizer)\n","    test_loss, test_accuracy = evaluate(model, test_loader)\n","\n","    print('[{}] Test Loss : {:.4f}, Accuracy: {:.2f}%'.format(\n","        epoch, test_loss, test_accuracy\n","    ))\n","\n","    print(f\"[{epoch}] Test Loss : \")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gVS6eoTya3gc","executionInfo":{"status":"ok","timestamp":1737871864727,"user_tz":-540,"elapsed":452975,"user":{"displayName":"느으엉","userId":"07251074960080111046"}},"outputId":"a21009bf-4d70-47c6-e839-1c3b09a29852"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["[1] Test Loss : 0.5628, Accuracy: 80.35%\n","[1] Test Loss : \n","[2] Test Loss : 0.4903, Accuracy: 82.35%\n","[2] Test Loss : \n","[3] Test Loss : 0.4517, Accuracy: 84.02%\n","[3] Test Loss : \n","[4] Test Loss : 0.4261, Accuracy: 84.96%\n","[4] Test Loss : \n","[5] Test Loss : 0.4063, Accuracy: 85.64%\n","[5] Test Loss : \n","[6] Test Loss : 0.3917, Accuracy: 86.14%\n","[6] Test Loss : \n","[7] Test Loss : 0.3817, Accuracy: 86.27%\n","[7] Test Loss : \n","[8] Test Loss : 0.3746, Accuracy: 86.48%\n","[8] Test Loss : \n","[9] Test Loss : 0.3662, Accuracy: 86.77%\n","[9] Test Loss : \n","[10] Test Loss : 0.3610, Accuracy: 87.13%\n","[10] Test Loss : \n","[11] Test Loss : 0.3561, Accuracy: 87.33%\n","[11] Test Loss : \n","[12] Test Loss : 0.3523, Accuracy: 87.44%\n","[12] Test Loss : \n","[13] Test Loss : 0.3492, Accuracy: 87.62%\n","[13] Test Loss : \n","[14] Test Loss : 0.3451, Accuracy: 87.75%\n","[14] Test Loss : \n","[15] Test Loss : 0.3421, Accuracy: 87.93%\n","[15] Test Loss : \n","[16] Test Loss : 0.3385, Accuracy: 88.07%\n","[16] Test Loss : \n","[17] Test Loss : 0.3355, Accuracy: 88.26%\n","[17] Test Loss : \n","[18] Test Loss : 0.3358, Accuracy: 88.22%\n","[18] Test Loss : \n","[19] Test Loss : 0.3348, Accuracy: 88.23%\n","[19] Test Loss : \n","[20] Test Loss : 0.3344, Accuracy: 88.28%\n","[20] Test Loss : \n","[21] Test Loss : 0.3344, Accuracy: 88.20%\n","[21] Test Loss : \n","[22] Test Loss : 0.3352, Accuracy: 88.30%\n","[22] Test Loss : \n","[23] Test Loss : 0.3331, Accuracy: 88.36%\n","[23] Test Loss : \n","[24] Test Loss : 0.3345, Accuracy: 88.36%\n","[24] Test Loss : \n","[25] Test Loss : 0.3337, Accuracy: 88.24%\n","[25] Test Loss : \n","[26] Test Loss : 0.3336, Accuracy: 88.48%\n","[26] Test Loss : \n","[27] Test Loss : 0.3344, Accuracy: 88.43%\n","[27] Test Loss : \n","[28] Test Loss : 0.3353, Accuracy: 88.34%\n","[28] Test Loss : \n","[29] Test Loss : 0.3354, Accuracy: 88.43%\n","[29] Test Loss : \n","[30] Test Loss : 0.3370, Accuracy: 88.42%\n","[30] Test Loss : \n"]}]},{"cell_type":"code","source":["# DNN , overfitting, drop-out\n","train_loader = torch.utils.data.DataLoader(\n","    datasets.MNIST('./.data',\n","                   train=True,\n","                   download=True,\n","                   transform=transforms.Compose([\n","                       transforms.RandomHorizontalFlip(), # 데이터 2배!\n","                       transforms.ToTensor(),\n","                       transforms.Normalize((0.1307,), (0.1307, ))\n","                   ])),\n","    batch_size = BATCH_SIZE, shuffle = True)\n","\n","test_loader = torch.utils.data.DataLoader(\n","    datasets.MNIST('./.data',\n","                   train=False,\n","                   download=True,\n","                   transform=transforms.Compose([\n","                       transforms.ToTensor(),\n","                       transforms.Normalize((0.1307, ), (0.3081, ))\n","                   ])),\n","    batch_size=BATCH_SIZE, shuffle=True\n",")\n","\n","\n","# 가중치가 없는 함수는 torch.nn.Functional 패키지에서 바로 가져와 사용 가능\n","# drop-out Network\n","class Net2(nn.Module):\n","    def __init__(self, dropout_p=0.2):\n","        super(Net2, self).__init__()\n","        self.fc1 = nn.Linear(784, 256)\n","        self.fc2 = nn.Linear(256, 128)\n","        self.fc3 = nn.Linear(128, 10)\n","        self.dropout_p = dropout_p # add\n","\n","    def forward(self, x):\n","        x = x.view(-1, 784)\n","        x = F.relu(self.fc1(x))\n","        x = F.dropout(x, training=self.training, p=self.dropout_p) # add\n","        x = F.relu(self.fc2(x))\n","        x = F.dropout(x, training=self.training, p=self.dropout_p) # add\n","        x = self.fc3(x)\n","        return x\n","\n","model2 = Net2(dropout_p = 0.2).to(DEVICE)\n","optimizer2 = optim.SGD(model2.parameters(), lr=0.01)\n","\n","\n","for epoch in range(1, EPOCHS + 1):\n","    train(model2, train_loader, optimizer2)\n","    test_loss, test_accuracy = evaluate(model2, test_loader)\n","\n","    print('[{}] Test Loss : {:.4f}, Accuracy: {:.2f}%'.format(\n","        epoch, test_loss, test_accuracy\n","    ))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B5lmKmKx5UAB","executionInfo":{"status":"ok","timestamp":1737378675606,"user_tz":-540,"elapsed":599126,"user":{"displayName":"느으엉","userId":"07251074960080111046"}},"outputId":"68a5b20b-6822-4a70-ea9b-285a623c1ded"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n","Failed to download (trying next):\n","HTTP Error 404: Not Found\n","\n","Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz\n","Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz to ./.data/MNIST/raw/train-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9.91M/9.91M [00:00<00:00, 16.1MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./.data/MNIST/raw/train-images-idx3-ubyte.gz to ./.data/MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n","Failed to download (trying next):\n","HTTP Error 404: Not Found\n","\n","Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz\n","Downloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz to ./.data/MNIST/raw/train-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 28.9k/28.9k [00:00<00:00, 498kB/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./.data/MNIST/raw/train-labels-idx1-ubyte.gz to ./.data/MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n","Failed to download (trying next):\n","HTTP Error 404: Not Found\n","\n","Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz\n","Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz to ./.data/MNIST/raw/t10k-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1.65M/1.65M [00:00<00:00, 4.51MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./.data/MNIST/raw/t10k-images-idx3-ubyte.gz to ./.data/MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n","Failed to download (trying next):\n","HTTP Error 404: Not Found\n","\n","Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz\n","Downloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz to ./.data/MNIST/raw/t10k-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 4.54k/4.54k [00:00<00:00, 3.69MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./.data/MNIST/raw/t10k-labels-idx1-ubyte.gz to ./.data/MNIST/raw\n","\n","[1] Test Loss : 0.7483, Accuracy: 88.03%\n","[2] Test Loss : 0.6021, Accuracy: 90.99%\n","[3] Test Loss : 0.5103, Accuracy: 93.18%\n","[4] Test Loss : 0.4477, Accuracy: 93.95%\n","[5] Test Loss : 0.4167, Accuracy: 94.59%\n","[6] Test Loss : 0.4027, Accuracy: 95.04%\n","[7] Test Loss : 0.3535, Accuracy: 95.20%\n","[8] Test Loss : 0.3427, Accuracy: 95.46%\n","[9] Test Loss : 0.3248, Accuracy: 95.57%\n","[10] Test Loss : 0.3135, Accuracy: 96.00%\n","[11] Test Loss : 0.2861, Accuracy: 96.18%\n","[12] Test Loss : 0.2848, Accuracy: 96.26%\n","[13] Test Loss : 0.2758, Accuracy: 96.41%\n","[14] Test Loss : 0.2657, Accuracy: 96.56%\n","[15] Test Loss : 0.2583, Accuracy: 96.48%\n","[16] Test Loss : 0.2509, Accuracy: 96.78%\n","[17] Test Loss : 0.2505, Accuracy: 96.72%\n","[18] Test Loss : 0.2358, Accuracy: 96.90%\n","[19] Test Loss : 0.2379, Accuracy: 96.92%\n","[20] Test Loss : 0.2243, Accuracy: 96.84%\n","[21] Test Loss : 0.2188, Accuracy: 96.93%\n","[22] Test Loss : 0.2085, Accuracy: 96.99%\n","[23] Test Loss : 0.2143, Accuracy: 97.03%\n","[24] Test Loss : 0.2098, Accuracy: 97.03%\n","[25] Test Loss : 0.2069, Accuracy: 96.99%\n","[26] Test Loss : 0.2068, Accuracy: 97.09%\n","[27] Test Loss : 0.1995, Accuracy: 97.12%\n","[28] Test Loss : 0.1897, Accuracy: 97.05%\n","[29] Test Loss : 0.1874, Accuracy: 97.20%\n","[30] Test Loss : 0.1857, Accuracy: 97.02%\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1736852546776}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}